---
  - name: Get session token to connect controller
    uri:
      url: http://{{ controller.host_ip }}:8080/api/v1/login
      return_content: yes
      validate_certs: false
      headers:
        Content-Type: "application/json"
        Accept-Charset: "UTF-8"
      method: POST
      body_format: json
      body:
        name: "{{ controller_creds.name }}"
        password: "{{ controller_creds.password }}"
      status_code:
        - 201
    register: login_response

  - name: Fetch location header
    set_fact:
      session_token="{{ login_response.location }}"

  - name: Fetch token
    set_fact:
      token: "/{{session_token.split('/')[3]}}/{{session_token.split('/')[4]}}/{{session_token.split('/')[5]}}/{{session_token.split('/')[6]}}"

  - debug:
      msg="{{ token }}"

  - name: Get k8s cluster info
    uri:
      url: http://{{ controller.host_ip }}:8080/api/v2/k8scluster
      return_content: yes
      validate_certs: false
      headers:
        X-BDS-SESSION: "{{ token }}"
        Content-Type: "application/json"
        Accept-Charset: "UTF-8"
      method: GET
      status_code:
        - 200
    register: cluster_info
  
  - name: save the Json data to a Variable as a Fact
    set_fact:
      cluster_info: "{{ cluster_info.content }}"

  - name: Set the k8s_cluster variable
    set_fact:
      k8s_cluster: "{{ item._links.self.href }}"
    with_items: "{{cluster_info._embedded.k8sclusters }}"
    when: item.label.name == "{{ k8stenant.k8s_cluster }}"
  
  - debug:
      msg: "{{ k8s_cluster }}"
      
  - name: creating payload json file 
    copy:
      dest: "/tmp/payload_tenant.json"
      content: |
        {
          "label": {
            "name": "{{ k8stenant.name }}",
            "description": "{{ k8stenant.description }}"
          },
          "tenant_type_info": {
            "map_services_to_gateway": {{ k8stenant.tenant_type_info.map_services_to_gateway | bool | lower }},
            "specified_namespace_name": "{{ k8stenant.tenant_type_info.specified_namespace_name }}",
            "is_namespace_owner": {{ k8stenant.tenant_type_info.is_namespace_owner | bool | lower }},
            "adopt_existing_namespace": {{ k8stenant.tenant_type_info.adopt_existing_namespace | bool | lower }}
          },
          "tenant_type": "{{ k8stenant.tenant_type }}",
          "features": {
            "ml_project": {{ k8stenant.features.ml_project | bool | lower }}
          },
          "is_namespace_owner": {{ k8stenant.is_namespace_owner | bool | lower }},
          "quota": {
            "memory": {{ k8stenant.quota.memory }},
            "persistent": {{ k8stenant.quota.persistent }},
            "gpus": "{{ k8stenant.quota.gpus }}",
            "cores": {{ k8stenant.quota.cores }},
            "disk": {{ k8stenant.quota.disk }},
            "tenant_storage": "{{ k8stenant.quota.tenant_storage }}"
          },
          "k8s_cluster": "{{ k8s_cluster }}",
          "specified_namespace_name": "{{ k8stenant.specified_namespace_name }}",
          "map_services_to_gateway": {{ k8stenant.map_services_to_gateway | bool | lower }},
          "adopt_existing_namespace": {{ k8stenant.adopt_existing_namespace | bool | lower }},
          "krb_enc_types": {{ k8stenant.krb_enc_types }}
        }
    register: output

  - debug:
      msg: output.stdout