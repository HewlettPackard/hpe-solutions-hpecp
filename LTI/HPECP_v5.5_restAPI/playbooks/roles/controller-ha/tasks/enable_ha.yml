###
## Copyright (2021) Hewlett Packard Enterprise Development LP
##
## Licensed under the Apache License, Version 2.0 (the "License");
## You may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
####
---

  - name: Get session token to connect controller
    uri:
      url: http://{{ controller.host_ip }}:8080/api/v1/login
      return_content: yes
      validate_certs: false
      headers:
        Content-Type: "application/json"
        Accept-Charset: "UTF-8"
      method: POST
      body_format: json
      body:
        name: "{{ controller_creds.name }}"
        password: "{{ controller_creds.password }}"
      status_code:
        - 201
    register: login_response

  - name: Fetch location header
    set_fact:
      session_token="{{ login_response.location }}"

  - name: Fetch token
    set_fact:
      token: "/{{session_token.split('/')[3]}}/{{session_token.split('/')[4]}}/{{session_token.split('/')[5]}}/{{session_token.split('/')[6]}}"

  - debug:
      msg="{{ token }}"
  
  - name: Get epic-workers info
    uri:
      url: http://{{ controller.host_ip }}:8080/api/v1/workers
      return_content: yes
      validate_certs: false
      headers:
        X-BDS-SESSION: "{{ token }}"
        Accept-Charset: "UTF-8"
        Content-Type: "application/json"
      method: GET
      status_code:
        - 200
    register: epic_workers_info

  - name: save the Json data to a Variable as a Fact
    set_fact:
      worker_info: "{{ epic_workers_info.content }}"

  - name: Get valid worker urls
    set_fact:
      worker_hrefs: "{{ worker_hrefs|default({}) | combine( {item.ip: item._links.self.href} ) }}"
    with_items: "{{worker_info._embedded.workers }}"
  
  - debug:
      msg= "{{ worker_hrefs }}"

  - name: Gather epicworkers urls
    set_fact:
      epiworker_urls: "{{ epiworker_urls| default([]) + [worker_hrefs[item.worker]] }}"
    with_items: "{{ epicworkers.host_pools}}"

  - debug:
      msg= "{{ epiworker_urls }}"

  - name: Shadow id
    set_fact:
      shadow_id: "{{ epiworker_urls[1] }}"
  - name: Arbiter id
    set_fact:
      arbiter_id: "{{ epiworker_urls[0] }}"

  - name: Enable HA on epic-workers
    uri:
      url: http://{{ controller.host_ip }}:8080/api/v1/install/?install_ha
      return_content: yes
      validate_certs: false
      headers:
        X-BDS-SESSION: "{{ token }}"
        Accept-Charset: "UTF-8"
        Content-Type: "application/json"
      method: PUT
      body_format: json
      body: "{\"clusterip\":\"{{ controllerha.clusterip }}\",\"cluster_dns_name\":\"{{ controllerha.cluster_dns_name}}\",\"shadow\":\"{{ shadow_id }}\",\"arbiter\":\"{{ arbiter_id }}\"}"
      status_code:
        - 204
    register: res_ha_status
  
  - debug:
      msg: "{{ res_ha_status }}"

  - name: Fetch controller ha status 
    uri:
      url: http://{{ controller.host_ip }}:8080/api/v1/install/?configinfo
      return_content: yes
      validate_certs: false
      headers:
        X-BDS-SESSION: "{{ token }}"
        Content-Type: "application/json"
        Accept-Charset: "UTF-8"
      method: GET
      status_code:
        - 200
    register: ha_status_info

  - name: save the Json data to a Variable as a Fact
    set_fact:
      ha_content: "{{ ha_status_info.content }}"

  - name: Set the ha status info
    set_fact:
      ha_enabling_status: "{{ ha_content.config_data.bds_ha_enabled }}"    # here item refers to json response array

  - debug:
      msg: "{{ ha_enabling_status }}"
  
  - debug: 
      msg: "HA is being enabled"
    when: ha_enabling_status == "Yes"

  - name: Sleep for 3600 seconds and continue with play
    ansible.builtin.wait_for:
      timeout: 3600

  - name: Get session token to connect cluster ip
    uri:
      url: http://{{ controllerha.clusterip }}:8080/api/v1/login
      return_content: yes
      validate_certs: false
      headers:
        Content-Type: "application/json"
        Accept-Charset: "UTF-8"
      method: POST
      body_format: json
      body:
        name: "{{ controller_creds.name }}"
        password: "{{ controller_creds.password }}"
      status_code:
        - 201
    register: login_response
  
  - debug: 
      msg: "HA is successfully configured"
    when: login_response.status == 201
    
  

