(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{256:function(e,t,a){e.exports=a.p+"assets/img/figure69.08a51866.png"},283:function(e,t,a){e.exports=a.p+"assets/img/figure70.cd7bf632.png"},284:function(e,t,a){e.exports=a.p+"assets/img/figure71.75b83dd2.png"},285:function(e,t,a){e.exports=a.p+"assets/img/figure72.76ed0c0c.png"},286:function(e,t,a){e.exports=a.p+"assets/img/figure73.b0c6cb1b.png"},287:function(e,t,a){e.exports=a.p+"assets/img/figure74.aa44d43f.png"},288:function(e,t,a){e.exports=a.p+"assets/img/figure75.16eb8aab.png"},408:function(e,t,a){"use strict";a.r(t);var s=a(14),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"deploying-stateful-application-using-kubedirector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deploying-stateful-application-using-kubedirector"}},[e._v("#")]),e._v(" Deploying stateful application using KubeDirector")]),e._v(" "),t("p",[e._v("The steps to deploy the Methodize-Productivity application using KubeDirector are as follows:")]),e._v(" "),t("ol",[t("li",[e._v("Create Dockerfiles for the three tiers.")])]),e._v(" "),t("ul",[t("li",[e._v("Create the frontend dockerfile. Copy the package.json file and install all the required modules and dependencies and then copy the remaining project files into the working directory and expose port 3000. Use the command “npm start” to start the frontend User Interface:")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("FROM node:10\nWORKDIR /usr/src/app\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v("\nCOPY package.json ./\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\nCOPY "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\nEXPOSE "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3000")]),e._v("\nCMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("“npm”, “start”"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),t("ul",[t("li",[e._v("Create the backend dockerfile. Copy the package.json file and install all the required modules and dependencies and then copy the remaining project files into the working directory and expose port 8081. Use the command “nodemon index” to start the backend server:")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("FROM node:10\nWORKDIR /usr/src/app\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v("\nCOPY package.json ./\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-g")]),e._v(" nodemon\nCOPY "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\nEXPOSE "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8081")]),e._v("\nCMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("“nodemon”, “index”"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),t("ul",[t("li",[e._v("Create a dump of the database and then create the database dockerfile and copy the data dump file into it:")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("FROM mongo:4.0\nCOPY "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" –y\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[e._v("Create the images and push them into DockerHub for future access from the HPE Ezmeral Runtime Enterprise.")]),e._v(" "),t("p",[t("img",{attrs:{src:a(256),alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Figure 68.")]),e._v(" HPE Ezmeral Runtime Enterprise DockerHub for future access")])]),e._v(" "),t("li",[t("p",[e._v("Login to the HPE Ezmeral Runtime Enterprise and the required tenant. Create the KubeDirectorApp yaml file as shown.")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" methodize-productivity.yaml\n")])])]),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("apiVersion: kubedirector.hpe.com/v1beta1\nkind: KubeDirectorApp\nmetadata:\n  name: methodize-productivity\nspec:\n  label:\n    name: Methodize-Productivity\n    description: A productivity task manager application using the MERN Stack\n  distroID: hpecp/methodize\n  version: ‘1.1’\n  configSchemaVersion: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),e._v("\n  defaultConfigPackage: null\n  services:\n  - id: frontend\n    label:\n      name: Frontend Service\n    endpoint:\n      port: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3000")]),e._v("\n      urlScheme: http\n      isDashboard: "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n  - id: backend\n    label:\n      name: Backend Service\n    endpoint:\n      port: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8081")]),e._v("\n      isDashboard: "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n  - id: mongodb\n    label:\n      name: MongoDB Service\n    endpoint:\n      port: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("27017")]),e._v("\n      isDashboard: "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n  roles:\n  - id: frontend\n    cardinality: ‘1’\n    imageRepoTag: docker.io/pranavvutkur/frontend-methodize:latest\n    persistDirs:\n    - “/usr/src/app”\n  - id: backend\n    cardinality: ‘1’\n    imageRepoTag: docker.io/pranavvutkur/backend-methodize:latest\n    persistDirs:\n    - “/usr/src/app”\n  - id: mongodb\n    cardinality: ‘1’\n    imageRepoTag: docker.io/pranavvutkur/data-methodize:latest\n    persistDirs:\n    - “/data/db”\n  config:\n    selectedRoles:\n    - frontend\n    - backend\n    - mongodb\n    roleServices:\n    - roleID: frontend\n    serviceIDs:\n    - frontend\n    - roleID: backend\n    serviceIDs:\n    - backend\n    - roleID: mongodb\n    serviceIDs:\n    - mongodb\n  systemdRequired: "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),t("p",[e._v("This file specifies the name of the application as Methodize-Productivity (spec.label.name). Three services are created. First service is for the frontend exposing port 3000 and second service is for the backend exposing port 8081 and finally the last service is for the mongodb database exposing port 27017.")]),e._v(" "),t("p",[e._v("The three roles created are:\na. frontend role which specifies the image used (docker.io/pranavvutkur/frontend-methodize:latest) and the persistDirs directory (/usr/src/app).")]),e._v(" "),t("p",[e._v("b. backend role specifies the image used (docker.io/pranavvutkur/backend-methodize:latest) and the persistDirs directory (/usr/src/app)")]),e._v(" "),t("p",[e._v("c. mongodb role specifies the image used (docker.io/pranavvutkur/data-methodize:latest) and the persistDirs directory (/data/db)")])]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("Execute the following command to create the KubeDirectorApp.")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" kubectl create–f methodize-productivity.yaml\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[t("p",[e._v("Next step is to launch the created application from the HPE Ezmeral Runtime Enterprise GUI and assign custom values for the storage, CPU, memory, and the number of replicas as required and include the environment variables if required and Click Submit to represent the KubeDirector cluster data.")])]),e._v(" "),t("li",[t("p",[e._v("A KubeDirector application instance gets created for the Methodize-Productivity application with service endpoints.")])]),e._v(" "),t("li",[t("p",[e._v("Identify the pods for the three tiers:")]),e._v(" "),t("ul",[t("li",[e._v("Exec into the database pod")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("db pod"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -- /bin/bash\n")])])]),t("p",[e._v("and restore the dump file using the following command.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" mongorestore –db methodize –drop methodize "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("methodize is the name of the data dump "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("ul",[t("li",[e._v("Exec into the backend pod")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("backend pod"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -- /bin/bash\n")])])]),t("p",[e._v("and navigate into the “config” folder and open the “dev.js” file")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" dev.js\nInside the "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" replace the “MONGO_URL” with the new "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" endpoint gateway mapping of the mongoDB pod.\n")])])]),t("ul",[t("li",[e._v("Exec into the frontend pod and open the “package.json” file")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" package.json\nInside the "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" replace the “proxy” key with the "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" end point gateway mapping of the backend pod.\n")])])])]),e._v(" "),t("li",[t("p",[e._v("Delete the Frontend pod so the new pod will spin up with the modified proxy changes.")])]),e._v(" "),t("li",[t("p",[e._v("On the HPE Ezmeral Runtime Enterprise UI the service endpoint gateway mapping is used to access the Methodize-Productivity UI.Click Gateway Mappings as shown in Figure 69 to open the Methodize-Productivity home screen as shown in Figure 70.")])])]),e._v(" "),t("p",[t("img",{attrs:{src:a(256),alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Figure 69.")]),e._v(" Service Endpoint of the Methodize-Productivity Frontend.")]),e._v(" "),t("p",[t("img",{attrs:{src:a(283),alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Figure 70.")]),e._v(" Service Endpoint of the Methodize-Productivity URL.")]),e._v(" "),t("ol",{attrs:{start:"10"}},[t("li",[e._v("Click on “sign-in” and use the same credentials that were in use when the application was running on the virtual machine environment. Figure 71 shows the sign-up page filled in with the existing user credentials.")])]),e._v(" "),t("p",[t("img",{attrs:{src:a(284),alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Figure 71.")]),e._v(" Methodize-Productivity sign-in page with existing user credentials.")]),e._v(" "),t("ol",{attrs:{start:"11"}},[t("li",[e._v("Once the user has signed in they can view the To-Do task manager with all the existing created tasks as shown in Figure 72. The user can go ahead and create new tasks if required.")])]),e._v(" "),t("p",[t("img",{attrs:{src:a(285),alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Figure 72.")]),e._v(" Methodize-Productivity To-Do task manager page with existing tasks.")]),e._v(" "),t("ol",{attrs:{start:"12"}},[t("li",[e._v("Execute the following commands to see the pods, its Persistent Volume (PV) and Persistent Volume Claim (PVC) that are created. Figure 73 represents the pods, Figure 74 represents the PV, and Figure 75 represents the PVC of the Methodize-Productivity application.")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" kubectl get pods\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" kubectl get "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("pv")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" kubectl get pvc\n")])])]),t("p",[t("img",{attrs:{src:a(286),alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Figure 73.")]),e._v(" Pods for the Methodize-Productivity")]),e._v(" "),t("p",[t("img",{attrs:{src:a(287),alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Figure 74.")]),e._v(" Persistent volume for Methodize-Productivity")]),e._v(" "),t("p",[t("img",{attrs:{src:a(288),alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Figure 75.")]),e._v(" Persistent Volume Claim for Methodize-Productivity")])])}),[],!1,null,null,null);t.default=n.exports}}]);