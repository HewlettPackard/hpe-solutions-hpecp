###
##Copyright (2021) Hewlett Packard Enterprise Development LP
##
## Licensed under the Apache License, Version 2.0 (the "License");
## You may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##Â http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
#### 

---
- name: Check if the namespace already exists
  shell: kubectl get namespaces | awk '$1 == "{{ namespace }}"'
  register: namespacecheck
  run_once: true

- name: Wait for Seconds before proceeding
  wait_for: timeout=2

- name: End play if namespace exists
  debug:
        msg: "Ending the play. Reason: User defined namespace already exists. Re-visit vars/main.yaml file under roles, change project name and re-run the play."
  when: 'namespacecheck.stdout != "" and namespacecheck.rc == 0'
  run_once: true

- meta: end_play
  when: 'namespacecheck.stdout != "" and namespacecheck.rc == 0'
  
- name: Create a new kubenetes namespace for the Sysdig agent deployment
  shell: kubectl create namespace "{{ namespace }}" 
  register: namespacecreated
  when: 'namespacecheck.stdout == ""'
  run_once: true

- debug:
      msg: '"{{ namespacecreated.stderr }}"'
  when: 'namespacecreated.stderr == "Error from server (AlreadyExists)" or namespacecreated.stderr != ""'
  run_once: true
  
- debug:
      msg: '"{{ namespacecreated.stdout }}"'
  when: 'namespacecreated.stdout == "created"'
  run_once: true
  
- name: Create a service account for the namespace 
  command: 'kubectl create serviceaccount sysdig-agent -n  "{{ namespace }}"'
  register: serviceaccountcheck
  run_once: true
  changed_when: 'namespacecreated.stdout == "created" and namespacecreated.stderr != "Error from server (AlreadyExists)"'

- debug:
      msg: '"{{ serviceaccountcheck.stderr }}"'
  run_once: true
  when: 'serviceaccountcheck.stdout != "created"'

- debug:
      msg: '"{{ serviceaccountcheck.stdout }}"'
  run_once: true
  when: 'serviceaccountcheck.stdout == "created"'

- name: Create a secret key
  shell: kubectl create secret generic sysdig-agent --from-literal="{{ accesskeyname }}"="{{ accesskeyval }}" -n "{{ namespace }}"
  register: secretcheck
  changed_when: 'serviceaccountcheck.stdout == "created" and serviceaccountcheck.stderr != "Error from server (AlreadyExists)"'
  run_once: true

- debug:
      msg: '"{{ secretcheck.stderr }}"'
  run_once: true
  when: 'secretcheck.rc != 0'

- debug:
      msg: '"{{ secretcheck.stdout }}"'
  run_once: true
  when: 'secretcheck.rc == 0'

- name: Wait for Seconds before proceeding
  wait_for: timeout=5 

- name: Copy sysdig configmap file to temporary directory on installer machine
  copy:
    src: sysdig-agent-configmap.yaml
    dest: /tmp/sysdig-agent-configmap.yaml
    mode: 0755
    backup: yes
    force: yes

- name: Wait for Seconds before proceeding
  wait_for: timeout=5

- name: Copy sysdig daemon file to temporary directory on installer machine
  copy:
    src: sysdig-agent-daemonset-v2.yaml
    dest: /tmp/sysdig-agent-daemonset-v2.yaml
    mode: 0755
    backup: yes
    force: yes

- name: Wait for Seconds before proceeding
  wait_for: timeout=5

- name: Apply the configmap.yaml file using the command
  shell: kubectl apply -f "/tmp/sysdig-agent-configmap.yaml" -n "{{ namespace }}"
  register: configmapcheck
  when: 'secretcheck.rc == 0'
  run_once: true

- debug:
      msg: '"{{ configmapcheck.stderr }}"'
  run_once: true
  when: 'configmapcheck.rc != 0'
  
- debug:
      msg: '"{{ configmapcheck.stdout }}"'
  run_once: true
  when: 'configmapcheck.rc == 0'

- name: Apply the daemonset-v2.yaml file using the command
  shell: kubectl apply -f "/tmp/sysdig-agent-daemonset-v2.yaml" -n "{{ namespace }}"
  register: daemonsetcheck
  when: 'configmapcheck.rc == 0'
  run_once: true

- debug:
      msg: '"{{ daemonsetcheck.stderr }}"'
  run_once: true
  when: 'daemonsetcheck.rc != 0'
  
- debug:
      msg: '"{{ daemonsetcheck.stdout }}"'
  run_once: true
  when: 'daemonsetcheck.rc == 0'


- name: Wait for Seconds before proceeding
  wait_for: timeout=10

- name: check the agent pods status
  shell: kubectl get all -n "{{ namespace }}"
  register: agentpods
  run_once: true

- debug:
      msg: '"{{ agentpods.stderr }}"'
  run_once: true
  when: 'agentpods.rc != 0'
  
- debug:
      msg: '"{{ agentpods.stdout }}"'
  run_once: true
  when: 'agentpods.rc == 0'
